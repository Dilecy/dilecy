import { app, ipcMain, BrowserWindow, screen } from 'electron';
import path from 'path';
// Defines automatically generated by webpack plugin
declare let MAIN_WINDOW_WEBPACK_ENTRY: string;
// Defines from webpack.defines.js
declare let MAIN_WINDOW_ENABLE_NODE_INTEGRATION: boolean;
declare let IS_DEVELOPMENT: boolean;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Keep a global reference of the window object, if you don't, the window will
// be closed automatically when the JavaScript object is garbage collected.
let mainWindow: BrowserWindow | null;

const createWindow = () => {
  const { width } = screen.getPrimaryDisplay().size;
  // Create the browser window.
  mainWindow = new BrowserWindow({
    zoomToPageWidth: true,
    width: width >= 1440 ? 1440 : width,
    height: 900,
    minHeight: 675,
    minWidth: width <= 1440 ? 1024 : 1200,
    icon: path.join(__dirname, 'resources', 'app_icon.ico'),
    webPreferences: {
      nodeIntegration: MAIN_WINDOW_ENABLE_NODE_INTEGRATION
    }
  });
  // mainWindow.setMenu(null);
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (IS_DEVELOPMENT) {
    // Open the DevTools.
    // mainWindow.webContents.openDevTools();
  }

  mainWindow.on('close', e => {
    if (mainWindow) {
      e.preventDefault();
      mainWindow.webContents.send('app-close');
    }
  });

  // Emitted when the window is closed.
  mainWindow.on('closed', () => {
    // Dereference the window object, usually you would store windows
    // in an array if your app supports multi windows, this is the time
    // when you should delete the corresponding element.
    mainWindow = null;
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed.
app.on('window-all-closed', () => {
  // On OS X it is common for applications and their menu bar
  // to stay active until the user quits explicitly with Cmd + Q
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

ipcMain.on('quit-app', () => {
  if (mainWindow) {
    mainWindow.removeAllListeners('close');
  }
  app.quit();
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (mainWindow === null) {
    createWindow();
  }
});

if (IS_DEVELOPMENT) {
  console.log(`DevServer at: ${MAIN_WINDOW_WEBPACK_ENTRY}`);
}
